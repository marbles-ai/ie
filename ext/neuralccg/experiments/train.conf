ccgbank = {
  include "ccgbank.conf"
}

parser = {
  include "parser.conf"
}

oracle-inputs {
  type = oracle-inputs
  inputs {
    gold = ccgbank.train
    evaluator = ccgbank.evaluator
  }
  args = ${parser.args}
}

tagged-oracle-sentences {
  type = tagged-sentences
  inputs {
    inputs = oracle-inputs
  }
  args = ${parser.args} {
    partition_size = 1000
  }
}

word-embeddings {
  type = word-embeddings
  args.word_embeddings = data/embeddings.raw
}

train {
  type = train-parser
  inputs {
    train-inputs = oracle-inputs
    train-tags = tagged-oracle-sentences
    embeddings = word-embeddings
    evaluator = ccgbank.evaluator
  }
  args = ${parser.args} {
    trainer = sum-violation
    max_sentence_length = 70
    max_chart_size = 2000
    native_memory = 511
    n_best = 9999
    epochs = 30
    seed = 12345
    num_layers = 1
    category_dimensions = 16
    cell_dimensions = 64
    word_dimensions = 50
    score_supertags = true
    use_nonterminal_categories = true
    couple_gates = true
    use_output_gate = true
    use_recursion = true
    dropout_probability = 0.4
    update_method = adam
    use_compositional_categories = false
    use_char_lstm = false
    loss_scale = 0.0
    save_checkpoints = true
    checkpoint_frequency = 10000
  }
}

train-best = ${train}

train-debug = ${train} {
  args {
    train_limit = 100
    dev_limit = 10
  }
}

train-decoupled = ${train} {
  args.couple_gates = false
}

train-greedy = ${train} {
  args.trainer = greedy
}

train-max-violation = ${train} {
  args.trainer = max-violation
}

train-no-output-gate = ${train} {
  args.use_output_gate = false
}

train-compositional-categories = ${train} {
  args.use_compositional_categories = true
}

train-no-recursion = ${train} {
  args.use_recursion = false
}

train-non-exhaustive = ${train} {
  args.n_best = 1
}

train-char-lstm = ${train} {
  args.use_char_lstm = true
}

train-loss = ${train} {
  args.loss_scale = 1.0
}

train-latest-violation = ${train} {
  args.trainer = latest-violation
}

train-crf-loss = ${train} {
  args.trainer = crf
}

train-no-lstm = ${train} {
  args.num_layers = 0
}

train-no-lexical = ${train} {
  args.num_layers = -1
}