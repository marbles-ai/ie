-------------------------
RAW=0, AUTO=wsj_0001.1
    Pierre Vinken , 61 years old , will join the board as a nonexecutive director Nov. 29 .

Mismatch at word join
    Expected  [E8| join(E8),_EVENT(E8),_ARG0(E8,X1),_ARG1(E8,X10),_ARG2(E8,X14)]
    Neuralccg [E8| join(E8),_EVENT(E8),_ARG0(E8,X1),_ARG1(E8,X10)]
Mismatch at word as
    Expected  [| as(X14)]
    Neuralccg [| as(E8,X14)]

This seems to be a common issue. The preposition is unary in one mode and binary in the other.
When is unary we have an extra argument attached to the verb. One solutions is to make all
prepostions binary, and if they are attached to an event add an extra argument if it does not
exist.

-------------------------
RAW_LN=1, AUTO=wsj_0001.2

Mr. Vinken is chairman of Elsevier N.V. , the Dutch publishing group .

GOLD: [X5,X8...|...Elsevier-N.V(X5),Dutch(X8),publish(X8),group(X8),_AKA(X5,X8)]
NCCG: [X5,X8...|...Elsevier-N.V(X5),dutch(X8),publishing(X8),group(X8),_AKA(X5,X10)]

Easy SRL does the same.

Mismatch at word of
    Expected  [| of(X3,X5)]
    Neuralccg [| of(X3,X10)]
Mismatch at word Dutch
    Expected  [| Dutch(X8)]
    Neuralccg [| dutch(X10)]
Mismatch at word publishing
    Expected  [| publish(X8)]
    Neuralccg [| publishing(X10)]
Mismatch at word group
    Expected  [X8| group(X8)]
    Neuralccg [X10| group(X10)]

The problems is the head is "Dutch" in the gold parse and "group" in the NCCG parse. The POS tagger in NCCG
tagged Dutch as JJ, which is incorrect. POS tagging is not required for NCCG but it shows the training is
not sufficent to tag correctly. This probably needs to be fixed by retraining.

Heads of phrases are either on the left or right so it may be possible to purturb this. One solution is to
augment with a dependency parse and check the heads? Could also augment with ntlk POS tagging to verify
NNP's.

Maybe the appositive can help here because X10 renames a proper noun. We can construct a sentence as
below to check. Checked this and Dutch is still JJ (N/N). Is JJ correct? It seems like it sort of is.
Elsevier-N.V is the Dutch publish group. Anyhow logical model is correct except for issue below.

Once more issue - publish vs. publishing.  In gold publishing(VBG) while in NCCG and ESRL we have
publishing(NN). In all cases the category is N/N. Need to check lemmatizer.


-------------------------
RAW=2, AUTO=wsj_0002.1

For ESRL, N/PP does not instantiate a referent. Otherwise the same issue as NCCG.

Other problem relates to unidentified appositive.
[X1,X4,X8,E12...|Rudolph-Agnew(X1),55(X4),_NUM(X4),years(X4),old(X1),former(X8),chairman(X8)...]

Gold attaches _ARG0(E12,X1) but ESRL and NCCG attach _ARG0(E12,X8). We should never attach to the
appositive if it renames a propernoun.

Need to identify the appositive first. The reason its misses is I only check NP's but this is
an ADJP. Add this to my regressions.

-------------------------
RAW=1796, AUTO=wsj_0095.5
    The statistics imply that three-quarters of blacks approve of Mr. Bush \\'s job performance and
85 % of blacks approve of Mrs. Bush .

    Neural CCG conj rule unifies the two approve events. This is an AND conj - unifications should
only happen on OR. This happens because for events the universe is empty, i.e. the events are free
to unify. If they are part of the universe they will not unify. This change was made to allow
unification when using OR.

-------------------------
RAW=349, AUTO=wsj_0111.23

Mr. Mehta is widely viewed as a brilliant editor but a less-than-brilliant administrator and his
own departure was rumored recently .

Mismatch at word was
    Expected  [E17| be(E17),_EVENT(E17),_ARG0(E17,X14),_ARG1(E17,E18)]
    Neuralccg [E2| be(E2),_EVENT(E2),_ARG0(E2,X14),_ARG1(E2,E18)]

Update on 1796.  Also happens here. Not sure if its the "and" or "but" conj. One solution is when
I see conj like this, then iterate right side of conj derivation and add all events to the universe
of the inner DrsProduction of the right functor. This will prevent unification of the event.

-------------------------
RAW=348, AUTO=wsj_0111.22

TO part-of-speach attached to verb as ARG1, in gold  its attached via referent. We also see this with
preposition attachments. ((S_1\NP_1)\(S_1\NP_1))/NP_2 should have two refs [S_1, NP_2]

When Ms. Evans took her job , several important divisions that had reported to her predecessor were n't
included partly because she did n't wish to be a full-time administrator .

GOLD: [X2,E3,X4,X9,E12,X14,E16,E18,E22,E24,E26,X29| when(E16),Ms-Evans(X2),take(E3),_EVENT(E3),_ARG0(E3,X2),_ARG1(E3,X4),she(X4),job(X4),several(X9),important(X9),divisions(X9),that(X9),have(X11),_MODAL(X11),report(E12),_EVENT(E12),_ARG0(E12,X9),to(E12),she(X14),predecessor(X14),be(E16),_EVENT(E16),_ARG0(E16,X9),_ARG1(E16,E18),n't(E16),include(E18),_EVENT(E18),_ARG0(E18,X9),partly(E18),because(E18,E22),she(X21),do(E22),_EVENT(E22),_ARG0(E22,X21),_ARG1(E22,E24),n't(E22),wish(E24),_EVENT(E24),_ARG0(E24,X21),_ARG1(E24,X25),be(E26),_EVENT(E26),_ARG0(E26,X21),_ARG1(E26,X29),full-time(X29),administrator(X29),_ORPHANED(X14)]
      (<T S[dcl] 0 2> (<T S[dcl] 1 2> (<T S/S 0 2> (<L (S/S)/S[dcl] WRB WRB When (S_383/S_383)/S[dcl]_384>) (<T S[dcl] 1 2> (<T NP 0 1> (<T N 1 2> (<L N/N NNP NNP Ms. N_411/N_411>) (<L N NNP NNP Evans N>) ) ) (<T S[dcl]\NP 0 2> (<L (S[dcl]\NP)/NP VBD VBD took (S[dcl]\NP_391)/NP_392>) (<T NP 0 1> (<T N 1 2> (<L N/N PRP PRP her N_401/N_401>) (<L N NN NN job N>) ) ) ) ) ) (<T S[dcl] 1 2> (<L , , , , ,>) (<T S[dcl] 1 2> (<T NP 0 2> (<T NP 0 1> (<T N 1 2> (<L N/N JJ JJ several N_325/N_325>) (<T N 1 2> (<L N/N JJ JJ important N_318/N_318>) (<L N NNS NNS divisions N>) ) ) ) (<T NP\NP 0 2> (<L (NP\NP)/(S[dcl]\NP) WDT WDT that (NP_336\NP_336)/(S[dcl]_337\NP_336:B)_337>) (<T S[dcl]\NP 0 2> (<L (S[dcl]\NP)/(S[pt]\NP) VBD VBD had (S[dcl]\NP_346)/(S[pt]_347\NP_346:B)_347>) (<T S[pt]\NP 0 2> (<L S[pt]\NP VBN VBN reported S[pt]\NP_352>) (<T (S\NP)\(S\NP) 0 2> (<L ((S\NP)\(S\NP))/NP TO TO to ((S_365\NP_360)_365\(S_365\NP_360)_365)/NP_366>) (<T NP 1 2> (<L NP[nb]/N PRP$ PRP$ her NP[nb]_373/N_373>) (<L N NN NN predecessor N>) ) ) ) ) ) ) (<T S[dcl]\NP 0 2> (<T (S[dcl]\NP)/(S[pss]\NP) 0 2> (<L (S[dcl]\NP)/(S[pss]\NP) VBD VBD were (S[dcl]\NP_188)/(S[pss]_189\NP_188:B)_189>) (<L (S\NP)\(S\NP) RB RB n't (S_201\NP_196)_201\(S_201\NP_196)_201>) ) (<T S[pss]\NP 0 2> (<L S[pss]\NP VBN VBN included S[pss]\NP_206>) (<T (S\NP)\(S\NP) 1 2> (<L ((S\NP)\(S\NP))/((S\NP)\(S\NP)) RB RB partly ((S_309\NP_301)_309\(S_302\NP_301)_302)_309/((S_309\NP_301)_309\(S_302\NP_301)_302)_309>) (<T (S\NP)\(S\NP) 0 2> (<L ((S\NP)\(S\NP))/S[dcl] IN IN because ((S_219\NP_214)_219\(S_219\NP_214)_219)/S[dcl]_220>) (<T S[dcl] 1 2> (<L NP PRP PRP she NP>) (<T S[dcl]\NP 0 2> (<T (S[dcl]\NP)/(S[b]\NP) 0 2> (<L (S[dcl]\NP)/(S[b]\NP) VBD VBD did (S[dcl]\NP_229)/(S[b]_230\NP_229:B)_230>) (<L (S\NP)\(S\NP) RB RB n't (S_242\NP_237)_242\(S_242\NP_237)_242>) ) (<T S[b]\NP 0 2> (<L (S[b]\NP)/(S[to]\NP) VB NN wish (S[b]\NP_251)/(S[to]_252\NP_251:B)_252>) (<T S[to]\NP 0 2> (<L (S[to]\NP)/(S[b]\NP) TO TO to (S[to]\NP_261)/(S[b]_262\NP_261:B)_262>) (<T S[b]\NP 0 2> (<L (S[b]\NP)/NP VB VB be (S[b]\NP_269)/NP_270>) (<T NP 1 2> (<L NP[nb]/N DT DT a NP[nb]_284/N_284>) (<T N 1 2> (<L N/N JJ JJ full-time N_279/N_279>) (<L N NN NN administrator N>) ) ) ) ) ) ) ) ) ) ) ) ) ) ) (<L . . . . .>) )

NCCG: [X2,E3,X4,X9,E12,X14,E16,E18,E22,E24,E26,X29| when(E16),Ms-Evans(X2),take(E3),_EVENT(E3),_ARG0(E3,X2),_ARG1(E3,X4),she(X4),job(X4),several(X9),important(X9),divisions(X9),that(X9),have(X11),_MODAL(X11),report(E12),_EVENT(E12),_ARG0(E12,X9),_ARG1(E12,X14),to(X14),she(X14),predecessor(X14),be(E16),_EVENT(E16),_ARG0(E16,X9),_ARG1(E16,E18),n't(E16),include(E18),_EVENT(E18),_ARG0(E18,X9),partly(E18),because(E18,E22),she(X21),do(E22),_EVENT(E22),_ARG0(E22,X21),_ARG1(E22,E24),n't(E22),wish(E24),_EVENT(E24),_ARG0(E24,X21),_ARG1(E24,X25),be(E26),_EVENT(E26),_ARG0(E26,X21),_ARG1(E26,X29),full-time(X29),administrator(X29)]
      (<T S[dcl] 0 2> (<T S[dcl] 1 2> (<T S/S 0 2> (<T S/S 0 2> (<L (S/S)/S[dcl] WRB WRB When (S/S)/S[dcl]>) (<T S[dcl] 1 2> (<T NP 0 1> (<T N 1 2> (<L N/N NNP NNP Ms. N/N>) (<L N NNP NNP Evans N>) ) ) (<T S[dcl]\NP 0 2> (<L (S[dcl]\NP)/NP VBD VBD took (S[dcl]\NP)/NP>) (<T NP 0 2> (<L NP[nb]/N PRP$ PRP$ her NP[nb]/N>) (<L N NN NN job N>) ) ) ) ) (<L , , , , ,>) ) (<T S[dcl] 1 2> (<T NP 0 2> (<T NP 0 1> (<T N 1 2> (<L N/N JJ JJ several N/N>) (<T N 1 2> (<L N/N JJ JJ important N/N>) (<L N NNS NNS divisions N>) ) ) ) (<T NP\NP 0 2> (<L (NP\NP)/(S[dcl]\NP) WDT WDT that (NP\NP)/(S[dcl]\NP)>) (<T S[dcl]\NP 0 2> (<L (S[dcl]\NP)/(S[pt]\NP) VBD VBD had (S[dcl]\NP)/(S[pt]\NP)>) (<T S[pt]\NP 0 2> (<L (S[pt]\NP)/PP VBN VBN reported (S[pt]\NP)/PP>) (<T PP 0 2> (<L PP/NP TO TO to PP/NP>) (<T NP 0 2> (<L NP[nb]/N PRP$ PRP$ her NP[nb]/N>) (<L N NN NN predecessor N>) ) ) ) ) ) ) (<T S[dcl]\NP 0 2> (<T (S[dcl]\NP)/(S[pss]\NP) 0 2> (<L (S[dcl]\NP)/(S[pss]\NP) VBD VBD were (S[dcl]\NP)/(S[pss]\NP)>) (<L (S\NP)\(S\NP) RB RB n't (S\NP)\(S\NP)>) ) (<T S[pss]\NP 0 2> (<L S[pss]\NP VBN VBN included S[pss]\NP>) (<T (S\NP)\(S\NP) 1 2> (<L ((S\NP)\(S\NP))/((S\NP)\(S\NP)) RB RB partly ((S\NP)\(S\NP))/((S\NP)\(S\NP))>) (<T (S\NP)\(S\NP) 0 2> (<L ((S\NP)\(S\NP))/S[dcl] IN IN because ((S\NP)\(S\NP))/S[dcl]>) (<T S[dcl] 1 2> (<L NP PRP PRP she NP>) (<T S[dcl]\NP 0 2> (<T (S[dcl]\NP)/(S[b]\NP) 0 2> (<L (S[dcl]\NP)/(S[b]\NP) VBD VBD did (S[dcl]\NP)/(S[b]\NP)>) (<L (S\NP)\(S\NP) RB RB n't (S\NP)\(S\NP)>) ) (<T S[b]\NP 0 2> (<L (S[b]\NP)/(S[to]\NP) VB VB wish (S[b]\NP)/(S[to]\NP)>) (<T S[to]\NP 0 2> (<L (S[to]\NP)/(S[b]\NP) TO TO to (S[to]\NP)/(S[b]\NP)>) (<T S[b]\NP 0 2> (<L (S[b]\NP)/NP VB VB be (S[b]\NP)/NP>) (<T NP 0 2> (<L NP[nb]/N DT DT a NP[nb]/N>) (<T N 1 2> (<L N/N JJ JJ full-time N/N>) (<L N NN NN administrator N>) ) ) ) ) ) ) ) ) ) ) ) ) ) (<L . . . . .>) )

Mismatch at word reported
    Expected  [E12| report(E12),_EVENT(E12),_ARG0(E12,X9)]
    Neuralccg [E12| report(E12),_EVENT(E12),_ARG0(E12,X9),_ARG1(E12,X14)]
Mismatch at word to
    Expected  [| to(E12)]
    Neuralccg [| to(X14)]


-------------------------
RAW=36, AUTO=wsj_0004.4

(S\S)/PP VBG VBG according (S_197\S_197)/PP_198>

This is where a proposition is appropriate.  The gerund 'according' applies to the entire sentence
the left. Gerunds can also return (S[X]\NP)|(S[Y]\NP). In this case we seem to require an ARG0, however
a return of (S\NP)|(S\NP) could possible be a 2-var proposition such as

left sentence (S[X]_1\NP_2), [S_2,NP_2,...| gerund(S_2), ..., S_2:[S_1...NP_2]



----
PYCODE _refine_constituents()

                            elif len(p.get_head_span()) == 1:
                                cihead = ci.get_head_span()
                                ckhead = ck.get_head_span()
                                if len(ckhead) != 1 or len(cihead) != 1:
                                    # Cannot handle this case
                                    break
                                cihead = cihead[0]
                                ckhead = ckhead[0]
                                phead = p.get_head_span()[0]
                                if nd.head_idx == phead.idx:
                                    # Split nodes
                                    #
                                    #                       new-+-------------------.
                                    #                           |                   |
                                    # nd-+---------.        nd--+---------.         |
                                    #    |         |            |         |         |
                                    # child k   child i   =>  child k   child i   child p
                                    # {ck,pk}   {pi,ci}       {ck}      {ci}       {cp}
                                    assert cihead.head in phead
                                    assert ckhead.head in phead
                                elif phead.head in ckhead:
                                    # TODO: implement
                                    # Split nodes
                                    #
                                    #                       nd--+-------------------.
                                    #                           |                   |
                                    # nd-+---------.        new-+---------.         |
                                    #    |         |            |         |         |
                                    # child k   child i   =>  child p   child k   child i
                                    # {ck,pk}   {pi,ci}       {p}       {ck}       {ci}
                                    break
                                elif phead.head in cihead:
                                    # TODO: implement
                                    # Split nodes
                                    #
                                    #                       nd--+-------------------.
                                    #                           |                   |
                                    # nd-+---------.        new-+---------.         |
                                    #    |         |            |         |         |
                                    # child k   child i   =>  child p   child i   child k
                                    # {ck,pk}   {pi,ci}       {p}       {ci}       {ck}
                                    break
                                else:
                                    # Can't handle
                                    args = [self.msgid]
                                    args.extend(sorted([spnd, ci, ck, p]))
                                    _logger.warning('[msgid=%s], cannot split nominal np /%s/ -> /%s/%s/%s/' % tuple(args))
                                    break



                                # Split nodes if span is left or right justified
                                #
                                #                       nd--+-------------------.
                                #                           |                   |
                                # nd-+---------.        new-+---------.         |
                                #    |         |            |         |         |
                                # child k   child i   =>  child k   child p   child i
                                # {ck,pk}   {pi,ci}       {c}       {p}       {ci}

                                # Create an artifical node
                                ndx = STreeNode(len(self.stree_nodes), ci, head, result_category, rule, lex_range, op_range, depth))
